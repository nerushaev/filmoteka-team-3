{"mappings":"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","sources":["src/js/thema.js","src/js/refs.js","src/js/formattedGenresOnHomePage.js","src/js/storage.js","src/js/modal.js","src/js/modalInfo/appModalInfo.js","src/js/modalInfo/markupModalInfo.js","src/js/parseGenres.js"],"sourcesContent":["const checkbox = document.querySelector('#theme-switch-toggle');\n\nconst Theme = {\n  LIGHT: 'light-theme',\n  DARK: 'dark-theme',\n};\n\ndocument.body.classList.add(Theme.LIGHT);\n\ncheckbox.addEventListener('change', onCheckboxChange);\n\nfunction onCheckboxChange() {\n  document.body.classList.toggle(Theme.DARK);\n  document.body.classList.toggle(Theme.LIGHT);\n\n  setThemeInfoToLocalStorage();\n}\n\nfunction setThemeInfoToLocalStorage() {\n  if (document.body.classList.contains(Theme.LIGHT)) {\n    checkbox.setAttribute('checked', false);\n    localStorage.setItem('active-theme', Theme.LIGHT);\n  } else if (document.body.classList.contains(Theme.DARK)) {\n    checkbox.setAttribute('checked', true);\n    localStorage.setItem('active-theme', Theme.DARK);\n  }\n}\n\ngetThemeInfoFromLocalStorage();\n\nfunction getThemeInfoFromLocalStorage() {\n  if (localStorage.getItem('active-theme') === Theme.DARK) {\n    onCheckboxChange();\n  }\n}\n","const refs = {\n  API_KEY: 'ade224e438a5cac910232dacab4d697a',\n  POPULAR_URL: 'https://api.themoviedb.org/3/trending/movie/day',\n  GENRES_URL: 'https://api.themoviedb.org/3/genre/movie/list',\n  SEARCH_URL: 'https://api.themoviedb.org/3/search/movie',\n\n  STORAGE_KEY: 'genres_key',\n  LS_KEY_POPULAR_MOVIE: 'popular_movie_key',\n  LS_KEY_QUERY_MOVIE: 'query_movie_key',\n  LS_KEY_WATCH_MOVIE: 'watch_movie_key',\n\n  gallerySetEL: document.querySelector('.js-gallery__set'),\n  backdropEl: document.querySelector('.js-backdrop'),\n  modalInfoEL: document.querySelector('.js-modal__info'),\n  containerModalInfo: document.querySelector('.js-film__container--info'),\n  closeBtnModalInfo: document.querySelector('.js-btn__info--close'),\n  watchedBtnModalInfo: document.querySelector('.js-btn__info--watched'),\n  queueBtnModalInfo: document.querySelector('.js-btn__info--queue'),\n  homePageGallery: document.querySelector('.gallery__set'),\n  watchedBtnLibrary: document.querySelector('.lib__watched'),\n  queueBtnLibrary: document.querySelector('.lib__queue'),\n  galleryContainerLibrary: document.querySelector('.gallery__library__set'),\n  galleryMessage: document.querySelector('.gallery__items__notfound'),\n\n  IMG_URL: 'https://image.tmdb.org/t/p/w500',\n};\n\nconst userSearch = {\n  userSearchInputRef: document.querySelector('.header__input'),\n  searchButton: document.querySelector('.form-icon'),\n  formNotificationErr: document.querySelector('.form-notification'),\n};\n\nexport { refs, userSearch };\n","import { refs } from './refs';\n\nexport function renderGenresHomePage(idFilmGenre) {\n  const genresList = localStorage.getItem(refs.STORAGE_KEY);\n  const genresListFind = JSON.parse(genresList).genresData;\n  const ganres = idFilmGenre.map(\n    element => genresListFind.find(genre => genre.id == element).name\n  );\n\n  if (ganres.length > 3) {\n    ganres.splice(3);\n    ganres[2] = 'Other';\n  } else if (ganres.length === 0) {\n    ganres[0] = 'Genre unknown';\n  }\n\n  return ganres.join(', ');\n}\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport default {\n  save,\n  load,\n  remove,\n};","const refs = {\n    openModalFooter: document.querySelector('.footer-link'),\n    closeModalBtnFooter: document.querySelector('.team-modal__close'),\n    backdropFooter: document.querySelector('.team-modal'),\n    galleryLink: document.querySelectorAll('.gallery-home'),\n    btnModal: document.querySelector('.modal-close'),\n    backdrop: document.querySelector('.backdrop'),\n    galleryHome: document.querySelector('.gallery-home'),\n  };\n\n  refs.openModalFooter.addEventListener('click', openModal);\n  refs.closeModalBtnFooter.addEventListener('click', closeModal);\n  refs.backdropFooter.addEventListener('click', onClickBackdrop);\n  \n  function openModal() {\n    refs.backdropFooter.classList.remove('backdrop--hidden');\n    document.body.style.overflow = 'hidden';\n    window.addEventListener('keydown', onEscKeyPress);\n  }\n  function closeModal() {\n    refs.backdropFooter.classList.add('backdrop--hidden');\n    document.body.style.overflow = '';\n    window.removeEventListener('keydown', onEscKeyPress);\n  }\n  function onClickBackdrop(event) {\n    if (event.currentTarget === event.target) {\n      closeModal();\n    }\n  }\n  \n  function closeModalGallery() {\n    refs.backdrop.classList.add('backdrop--hidden');\n    document.body.style.overflow = '';\n  }\n  \n  function onEscKeyPress(event) {\n    if (event.code === 'Escape') {\n      closeModal();\n    }\n  }","import { refs } from '../refs';\nimport storage from '../storage';\nimport { generateMarkupModalInfo } from './markupModalInfo';\n \nconst DELAY = 250;\n\n// Слушатели\nrefs.gallerySetEL.addEventListener('click', onOpenModalInfo);\nconst galleryContainer = refs.galleryContainerLibrary;\nif (galleryContainer) {\n    galleryContainer.addEventListener('click', onOpenModalInfo)\n}\nrefs.closeBtnModalInfo.addEventListener('click', onCloseModalInfo);\nrefs.backdropEl.addEventListener('click', onBackdropClick);\n\n// Ф-ция открывает модальное окно с инфармацией о выбраном фильме, при нажатии на иконку с фильмом\n// (нужно на карточу с фильмом - ! не выходит поймать evt на LI, что бы взять id с LI, а не IMG!)\nasync function onOpenModalInfo(evt) {\n    if (evt.target.nodeName !== 'IMG') {\n        return;\n    }\n    const loadPopMovies = await storage.load(refs.LS_KEY_POPULAR_MOVIE);\n    let idMovie = Number(evt.target.dataset.id);\n    const selectedMovie = loadPopMovies.find(loadMovie => loadMovie.id === idMovie);\n    appendInfoForModalMarkup(selectedMovie);\n\n    document.body.classList.add('stop-scrolling');\n    window.addEventListener('keydown', onEscKeyPress);\n    refs.backdropEl.classList.remove('backdrop__is-hidden');\n}\n\n// Ф-ция закрывает модальное окно с инфармацией о фильме, при нажатии на кнопку закрытия\nfunction onCloseModalInfo() {\n    window.removeEventListener('keydown', onEscKeyPress);\n    refs.backdropEl.classList.add('backdrop__is-hidden');\n    document.body.classList.remove('stop-scrolling');\n    clearInfoForModalMarkup();\n}\n// Ф-ция закрывает модальное окно с инфармацией о фильме, при нажатии вне модалки (на бэкдроп)\nfunction onBackdropClick(evt) {\n    if (evt.currentTarget === evt.target) {\n        onCloseModalInfo();\n    }\n}\n// Ф-ция закрывает модальное окно с инфармацией о фильме, при нажатии на Esc\nfunction onEscKeyPress(evt) {\n    const ESC_KEY_CODE = 'Escape';\n\n    if (evt.code === ESC_KEY_CODE) {\n        onCloseModalInfo();\n    }\n}\n\n// Ф-ция добавляет разметку с информацией в модальное окно\nfunction appendInfoForModalMarkup(selectedMovie) {\n    refs.containerModalInfo.insertAdjacentHTML('beforeend', generateMarkupModalInfo(selectedMovie));\n}\n\n// Ф-ция очищает разметку с информацией в модальном окне (DELAY = $Duration)\nfunction clearInfoForModalMarkup() {\n    setTimeout(() => {\n        refs.containerModalInfo.innerHTML = '';\n    }, DELAY);\n}\n","import { refs } from \"../refs\";\nimport { renderMarkupGenres } from '../parseGenres';\n\nexport function generateMarkupModalInfo({\n  poster_path,\n  title,\n  vote_average,\n  vote_count,\n  popularity,\n  original_title,\n  genre_ids, id,\n\n  overview }) {\n  return `<div class=\"tumb__screen\">\n      ${poster_path ? `<img id=\"${id}\" class=\"film-screen\" src=\"${refs.IMG_URL}${poster_path}\" alt=\"${title}\" />` : ''}\n      </div>\n\n      <div class=\"film-container--descr\">\n        ${title ? `<h2  class=\"film-title\">${title}</h2>` : original_title}\n        <table class=\"film-description\">\n          <tr>\n            ${!vote_average && !vote_count ? '' :  `<th class=\"title-description\">Vote / Votes</th>\n            <td>\n              ${vote_average ? `<span class=\"description-vote\">${vote_average.toFixed(1)}</span> / ` : ''}\n              ${vote_count ? `<span class=\"description-votes\">${vote_count}</span>` : ''}\n            </td>\n          </tr>`}\n          <tr>\n            ${popularity ? `<th class=\"title-description\">Popularity</th>\n            <td>${popularity.toFixed(1)}</td>` : ''}\n          </tr>\n          <tr>\n            ${original_title ? `<th class=\"title-description description-title-original\">Original Title</th>\n            <td class=\"title-original-description\">${original_title}</td>` : ''}\n          </tr>\n          <tr>\n            ${!genre_ids || genre_ids.length === 0 ? '' : `<th class=\"title-description description-genre\">Genre</th>\n            <td>${renderMarkupGenres(genre_ids)}</td>`}\n          </tr>\n        </table>\n        ${ overview ? `<p class=\"film-delineation--title\">About</p>\n        <p class=\"film-delineation\">${overview}</p>` : ''}\n        \n      </div>`\n};\n","import { refs } from './refs';\n\nexport function renderMarkupGenres(idFilmGenre) {\n  const genresList = localStorage.getItem(refs.STORAGE_KEY);\n  const genresListFind = JSON.parse(genresList).genresData;\n\n  // console.log(\"genresListFind\",genresListFind);\n  // console.log(idFilmGenre);\n\n  // const numberGenres = idFilmGenre.length;\n\n  const ganres = idFilmGenre\n    .map(element => genresListFind.find(genre => genre.id == element).name)\n    .join(', ');\n  // console.log(ganres);\n\n  // console.log('genresListFind', genresListFind);\n\n  const numberGenres = idFilmGenre.length;\n\n  // const ganres = idFilmGenre\n  //   .map(element => genresListFind.find(genre => genre.id === element).name)\n  //   .join(', ');\n  // console.log(ganres);\n\n  return ganres;\n}\n"],"names":["$6a8c4410e06985ab$var$checkbox","document","querySelector","$6a8c4410e06985ab$var$Theme","$6a8c4410e06985ab$var$onCheckboxChange","body","classList","toggle","contains","setAttribute","localStorage","setItem","add","addEventListener","getItem","$ee27a4d7c64fc8c4$export$21666b427502ea6d","API_KEY","POPULAR_URL","GENRES_URL","SEARCH_URL","STORAGE_KEY","LS_KEY_POPULAR_MOVIE","LS_KEY_QUERY_MOVIE","LS_KEY_WATCH_MOVIE","gallerySetEL","backdropEl","modalInfoEL","containerModalInfo","closeBtnModalInfo","watchedBtnModalInfo","queueBtnModalInfo","homePageGallery","watchedBtnLibrary","queueBtnLibrary","galleryContainerLibrary","galleryMessage","IMG_URL","$ee27a4d7c64fc8c4$export$c8bf0d0c8171abe0","userSearchInputRef","searchButton","formNotificationErr","$krGWQ","parcelRequire","$2b1a683cfd678db4$export$c760c56c05a4c9a4","idFilmGenre","genresList","refs","genresListFind","JSON","parse","genresData","ganres","map","element","find","genre","id","name","length","splice","join","$3fff5e8daf4b13a6$export$2e2bcd8739ae039","key","value","serializedState","stringify","error","console","message","undefined","removeItem","$8a7e756c566dd1ea$var$refs","openModalFooter","closeModalBtnFooter","backdropFooter","galleryLink","querySelectorAll","btnModal","backdrop","galleryHome","$8a7e756c566dd1ea$var$closeModal","style","overflow","window","removeEventListener","$8a7e756c566dd1ea$var$onEscKeyPress","event","code","remove","currentTarget","target","$83279362983d7744$var$onOpenModalInfo","$83279362983d7744$var$galleryContainer","async","evt","nodeName","loadPopMovies","$5uEKZ","default","load","idMovie","Number","dataset","selectedMovie","insertAdjacentHTML","$gJRDc","generateMarkupModalInfo","$83279362983d7744$var$appendInfoForModalMarkup","loadMovie","$83279362983d7744$var$onEscKeyPress","$83279362983d7744$var$onCloseModalInfo","setTimeout","innerHTML","$c2fa736160f3772a$export$723750f4c45929c4","poster_path","title","vote_average","vote_count","popularity","original_title","genre_ids","overview","toFixed","$jVmjn","renderMarkupGenres","$e814a5c876fbefd7$export$1bf4e212ed195bc8"],"version":3,"file":"myLibrary.fc6016d1.js.map"}